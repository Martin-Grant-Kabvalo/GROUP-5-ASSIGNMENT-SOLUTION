<h1>Dashboard</h1>

<div class="chart-container">
    <!-- Chart 1: Students Per Class Chart -->
    <div class="chart">
        <h2>Students Per Class</h2>
        <canvas id="studentsPerClass"></canvas>
    </div>

    <!-- Chart 2: Module Assessments Per Class Chart -->
    <div class="chart">
        <h2>Module Assessments Per Class</h2>
        <canvas id="moduleAssessmentsPerClass"></canvas>
    </div>

    <!-- Chart 3: Gender Based Performance Chart -->
    <div class="chart">
        <h2>Gender Based Performance</h2>
        <canvas id="genderPerformanceComparison"></canvas>
    </div>

    <!-- Chart 4: Top Performers Chart -->
    <div class="chart">
        <h2>Top Performers</h2>
        <canvas id="topPerformers"></canvas>
    </div>

    <!-- Chart 5: Top Performing Classes Chart -->
    <div class="chart">
        <h2>Top Performing Classes</h2>
        <canvas id="topPerformingClasses"></canvas>
    </div>

    <!-- Chart 6: Module Performance Chart -->
    <div class="chart">
        <h2>Modules Performance</h2>
        <canvas id="performanceTrend"></canvas>
    </div>
</div>

<!-- Currency Exchange Rate -->
<div class="smis">
    <h2>Copyright &copy; Group 5</h2>
</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // JavaScript for creating and updating the charts
    const data = <%- JSON.stringify(dashboardData) %>;  //This is VS Code issue not recognizing ejs tags
    console.log(data);
    const studentsPerClass = data[0];
    const assessmentsPerClassPerModule = data[1];
    const perfomanceTrend = data[2];
    const topPerformingClasses = data[3];
    const genderPerformance = data[4];
    const topPerformers = data[5]

    const backgroundColor = [
            'rgba(255, 99, 132, 0.5)',  
            'rgba(75, 192, 192, 0.5)',   
            'rgba(255, 206, 86, 0.5)',   
            'rgba(54, 162, 235, 0.2)',   
            'rgba(153, 102, 255, 0.5)'  
        ];

        borderColor = [
            'rgba(255, 99, 132, 1)',    
            'rgba(75, 192, 192, 1)',   
            'rgba(255, 206, 86, 1)',   
            'rgba(54, 162, 235, 1)',    
            'rgba(153, 102, 255, 1)'   
        ];
    

    // Extract data from the dummyData object
    const studentsPerClassData = {
        labels: studentsPerClass.map(item => item.class),
        datasets: [{
            data: studentsPerClass.map(item => item.number_of_students),
            backgroundColor: backgroundColor,
            borderColor: borderColor,
            borderWidth: 1
        }]
    };

    const assessmentsPerClassPerModuleData = {
        labels: assessmentsPerClassPerModule.map(item => `${item.class} - ${item.module}`),
        datasets: [{
            data: assessmentsPerClassPerModule.map(item => item.totalAssessments),
            backgroundColor: backgroundColor,
            borderColor: borderColor,
            borderWidth: 1
        }]
    };

    const perfomanceTrendData = {
        labels: perfomanceTrend.map(item => `${item.module}`),
        datasets: [{
            label: 'Performance Trend',
            data: perfomanceTrend.map(item => item.averagePerformance),
            backgroundColor: backgroundColor
        }]
    };

    const topPerformersData = {
            labels: topPerformers.map(item => item.regNo),
        datasets: [{
            label: 'Top Performers (Bubble Chart)',
            data: topPerformers.map(item => ({
                x: item.regNo,            // X-axis value (regNo)
                y: item.averageScore,      // Y-axis value (averageScore )
                r: item.averageScore / 5, // Radius of the bubble (scaled for better visualization)
            })),
            backgroundColor: backgroundColor, 
            borderColor: borderColor,
            borderWidth: 1,
        }]
        };

    const topPerformingClassesData = {
        labels: topPerformingClasses.map(item => item.class),
        datasets: [{
            label: 'Top Performing Classes',
            data: topPerformingClasses.map(item => item.averageScore),
            backgroundColor: backgroundColor,
            borderColor: borderColor,
            borderWidth: 1
        }]
    };

    const genderPerformanceData = {
        labels: genderPerformance.map(item => item.gender),
        datasets: [{
            data: genderPerformance.map(item => item.averagePerformance),
            backgroundColor: backgroundColor
        }]
    };

    const studentsPerClassChart = new Chart(document.getElementById('studentsPerClass'), {
        type: 'polarArea',
        data: studentsPerClassData
    });

    const assessmentsPerClassPerModuleChart = new Chart(document.getElementById('moduleAssessmentsPerClass'), {
        type: 'pie',
        data: assessmentsPerClassPerModuleData
    });

    const genderPerformancehart = new Chart(document.getElementById('genderPerformanceComparison'), {
        type: 'doughnut',
        data: genderPerformanceData
    });

    const topPerformershart = new Chart(document.getElementById('topPerformers'), {
            type: 'bubble',
            data: topPerformersData,
            options: {
        responsive: true,
        scales: {
            x: {
                type: 'category',
                position: 'bottom',
            },
            y: {
                type: 'linear',
                position: 'left',
            },
        },
        plugins: {
            tooltip: {
                callbacks: {
                    label: (context) => {
                        const dataPoint = topPerformersData.datasets[context.datasetIndex].data[context.dataIndex];
                        const roundedAverageScore = Math.round(dataPoint.y);
                        const averageGradeLabel = `${roundedAverageScore}%`;
                        return averageGradeLabel;
                    },
                },
            },
        },
    },
    });

    const topPerformingClassesChart = new Chart(document.getElementById('topPerformingClasses'), {
        type: 'bar',
        data: topPerformingClassesData,
        options: {
        scales: {
            y: {
                beginAtZero: true,
                suggestedMax: 100, 
                ticks: {
                    callback: function (value) {
                        return value + '%'; 
                    },
                },
            },
        },
        plugins: {
            tooltip: {
                callbacks: {
                    label: function (context) {
                        const label = context.dataset.label || '';
                        const value = context.parsed.y || 0;
                        const roundedValue = Math.ceil(value);
                        return label + ': ' + roundedValue + '%';
                    },
                },
            },
        },
    },
    });

    const perfomanceTrendChart = new Chart(document.getElementById('performanceTrend'), {
       type: 'line',
       data: perfomanceTrendData,
       options: {
        scales: {
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function (value) {
                        return value + '%'; 
                    },
                },
            },
        },
    },
    });


</script>